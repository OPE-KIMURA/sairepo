AWSTemplateFormatVersion: '2010-09-09'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/21
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPCkadai1

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: PUBSUBkadai1

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags: 
        - Key: Name
          Value: PRISUBkadai1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGWkadai1

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet

  EIP:
    Type: AWS::EC2::EIP

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0a6fd4c92fc6ed7d5
      KeyName: yml-key
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref PublicSecurityGroup]
      Tags: 
        - Key: Name
          Value: PUBEC2kadai1

  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0a6fd4c92fc6ed7d5
      KeyName: yml-key
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: [!Ref PrivateSecurityGroup]
      Tags: 
        - Key: Name
          Value: PRIEC2kadai1

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable access on port 10022"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 10022
          ToPort: 10022
          CidrIp: 0.0.0.0/0

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable access on port 10022"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 10022
          ToPort: 10022
          CidrIp: 0.0.0.0/0

  IAMGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: IAMGroupkadai1

  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: IAMUserkadai1
      Groups: [!Ref IAMGroup]

  IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ec2_nodelete
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action:
              - ec2:TerminateInstances
            Resource: "*"
      Groups: [!Ref IAMGroup]

  PowerUserAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PowerUserAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      Groups:
        - !Ref IAMGroup